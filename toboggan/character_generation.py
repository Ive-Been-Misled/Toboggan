import random
from .game_components import Player, Enemy

def stat_gen(stat_precedence: dict, level: int) -> dict:
    """
    Generates the statistics for a character using
    the given precedence for stats.

    Args:
    stat_precedence: a dictionary of three strings consisting of
    combat_skill, defense, and speed with precedence as their
    value.  Precedence is a value determining how strong a
    statistic will be, the higher the better range should be
    from 0-10. 
    level: an int that helps balance character generation
    statistics and represents the level of the character being
    generated

    Returns:
    A dictionary of the statistics generated and their
    associated score.
    """
    stat_final = {}
    for stat in stat_precedence:
        prec = stat_precedence[stat]
        stat_final[stat] = random.randint(prec, int(prec * level * (1 + random.random())))
    return stat_final
def char_gen(stat_list: list, start_room: object) -> Player:
    """
    Generates the character object for the player specifically
    and the statistics associated.

    Args:
    stat_list: list of the order of stats the the user inputs

    Returns:
    The character object generated by user response.
    """
    combat = 10-2*(stat_list.index('combat')+1)
    defense = 10-2*(stat_list.index('defense')+1)
    speed = 10-2*(stat_list.index('speed')+1)
    stat_prec = {'combat':combat, 'def':defense, 'speed':speed}
    stat_final = stat_gen(stat_prec, 1)
    char = Player(start_room, stat_final['combat'], stat_final['def'], stat_final['speed'])
    return char

def enemy_gen(name: str, level: int, start_room: object) -> Enemy:
    stats = [1, 2, 3]
    random.shuffle(stats)
    stat_prec = {'combat':stats[0], 'def':stats[1], 'speed':stats[2]}
    stat_final = stat_gen(stat_prec, level)
    enem = Enemy(name, start_room, stat_final['combat'], stat_final['def'], stat_final['speed'], 5*level, level)
    return enem
